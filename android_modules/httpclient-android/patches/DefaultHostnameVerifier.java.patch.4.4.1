diff --git a/DefaultHostnameVerifier.java b/DefaultHostnameVerifier2.java
index 7fe7cb4..b4d0382 100644
--- a/DefaultHostnameVerifier.java
+++ b/DefaultHostnameVerifier2.java
@@ -111,7 +111,7 @@ public final class DefaultHostnameVerifier implements HostnameVerifier {
             // CN matching has been deprecated by rfc2818 and can be used
             // as fallback only when no subjectAlts are available
             final X500Principal subjectPrincipal = cert.getSubjectX500Principal();
-            final String cn = extractCN(subjectPrincipal.getName(X500Principal.RFC2253));
+            final String cn = new DistinguishedNameParser(subjectPrincipal).findMostSpecific("cn");
             if (cn == null) {
                 throw new SSLException("Certificate subject for <" + host + "> doesn't contain " +
                         "a common name and does not have alternative names");
@@ -229,34 +229,6 @@ public final class DefaultHostnameVerifier implements HostnameVerifier {
         return matchIdentity(host, identity, null, true);
     }
 
-    static String extractCN(final String subjectPrincipal) throws SSLException {
-        if (subjectPrincipal == null) {
-            return null;
-        }
-        try {
-            final LdapName subjectDN = new LdapName(subjectPrincipal);
-            final List<Rdn> rdns = subjectDN.getRdns();
-            for (int i = rdns.size() - 1; i >= 0; i--) {
-                final Rdn rds = rdns.get(i);
-                final Attributes attributes = rds.toAttributes();
-                final Attribute cn = attributes.get("cn");
-                if (cn != null) {
-                    try {
-                        final Object value = cn.get();
-                        if (value != null) {
-                            return value.toString();
-                        }
-                    } catch (NoSuchElementException ignore) {
-                    } catch (NamingException ignore) {
-                    }
-                }
-            }
-            return null;
-        } catch (InvalidNameException e) {
-            throw new SSLException(subjectPrincipal + " is not a valid X500 distinguished name");
-        }
-    }
-
     static List<String> extractSubjectAlts(final X509Certificate cert, final int subjectType) {
         Collection<List<?>> c = null;
         try {
